[project]
name = "uv-package-template"
version = "0.1.0"
description = "Template for UV package"
authors = [
  { name = "Davis McDowell", email = "78391846+sirbuffalo@users.noreply.github.com" },
]
readme = "README.md"
requires-python = ">=3.13"
dependencies = []
license = { file = "LICENSE" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Typing :: Typed",
  # Blocks publishing to PyPI - remove before `uv publish`
  "Private :: Do Not Upload",
]

[project.urls]
Homepage = "https://github.com/sirbuffalo/uv_package_template"
Repository = "https://github.com/sirbuffalo/uv_package_template"
Issues = "https://github.com/sirbuffalo/uv_package_template/issues"

[project.scripts]
# uv run main (should be equivalent to `poe run`)
main = "uv_package_template.__main__:main"

# if used, add --all-extras or --extra dev to `uv sync`
# [project.optional-dependencies]
# env = [
#   # "python-dotenv>=1.0.1", 
# ]

[tool.uv]
package = true
default-groups = ["dev"]

[dependency-groups]
dev = [
  "ruff>=0.12.10",
  "pytest>=8.3.2",
  "mypy>=1.10.0",
  "poethepoet>=0.26.1",
  "pre-commit>=4.3.0",
]

[tool.poe.executor]
type = "uv"

[tool.poe.tasks]
# run these with `poe <task>`
sync = { cmd = "uv sync --project ." }    # Create env with dev group
upgrade = { cmd = "uv sync --project . --upgrade" }
install-hooks = "pre-commit install --hook-type pre-commit --hook-type pre-push"
# Sometimes `poe run` works when `uv run main` doesn't
run = { cmd = "python -m uv_package_template", env = { PYTHONPATH = "src" } }
fast = { sequence = ["lint", "fmt", "typecheck"] }
full = { sequence = ["lint", "fmt", "typecheck-full", "test"] }
hooks = "pre-commit run --hook-stage pre-push --all-files"  # same as poe full
lint = "ruff check . --fix"
fmt = "ruff format ."
typecheck = "mypy src"
typecheck-full = "mypy src tests"
test = "pytest -q"

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/uv_package_template"]

[tool.hatch.build.targets.sdist]
exclude = [
  ".github",
  ".vscode",
  ".ruff_cache",
  ".mypy_cache",
  ".pytest_cache",
  "app.log",
  ".env",
]

[tool.ruff]
target-version = "py313"
line-length = 100
fix = true
force-exclude = true

[tool.ruff.lint]
# Core codes: pyflakes/pycodestyle/imports/bugbear/pyupgrade/simplify + Ruff rules.
select = ["E", "F", "W", "I", "B", "UP", "SIM", "RUF"]

[tool.ruff.lint.isort]
combine-as-imports = true
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "single"
indent-style = "space"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = ["src"]

[tool.mypy]
python_version = "3.13"
mypy_path = ["src"]
sqlite_cache = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
no_implicit_optional = true
disallow_untyped_defs = true
check_untyped_defs = true
strict = true
pretty = true

# Looser rules for tests
[[tool.mypy.overrides]]
module = ["tests.*"]
disallow_untyped_defs = false   # Donâ€™t require annotations
check_untyped_defs = true       # But still analyze bodies of untyped defs
warn_unused_ignores = false     # Reduced nagging for tests
